AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: A Serverless GraphQL API for a Student Information Management System (SIMS)

Parameters:
  APIName:
    Type: String
    Description: The name of the API
    MinLength: 3
    MaxLength: 20
    Default: AppSyncApi
    AllowedPattern: '^[a-zA-Z][a-zA-Z0-9_]*'
  APIStage:
    Type: String
    Description: The name of the API stage
    MinLength: 3
    MaxLength: 20
    Default: dev
    AllowedPattern: '^[a-zA-Z][a-zA-Z0-9_]*'
    
Globals:
  Function:
    Runtime: nodejs18.x
    Timeout: 10
    MemorySize: 128
    Environment:
      Variables:
        TABLE_NAME: !Ref StudentInfoTable

Resources:
  StudentInfoTable:
    Type: "AWS::DynamoDB::Table"
    Description: Data stores for AppSync Student Information API
    Properties:
      TableName: !Sub ${APIName}-student-info-table-${APIStage}
      AttributeDefinitions:
        - AttributeName: studentId
          AttributeType: S
        - AttributeName: courseId
          AttributeType: S
      KeySchema:
        - AttributeName: studentId
          KeyType: HASH
        - AttributeName: courseId
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
    
  GetStudentFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: api/services/student-info/get-student.handler
      Description: This lambda function performs read operations and returns student information into DynamoDB table
      MemorySize: 128
      Timeout: 10
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
              Resource: !GetAtt StudentInfoTable.Arn      
  
  CreateStudentFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: api/services/student-info/create-student.handler
      Description: This lambda function performs create operations and inserts student information into DynamoDB table
      MemorySize: 128
      Timeout: 10
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
              Resource: !GetAtt StudentInfoTable.Arn    
  
  UpdateStudentFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: api/services/student-info/update-student.handler
      Description: This lambda function performs update operations and updates student information into DynamoDB table
      MemorySize: 128
      Timeout: 10
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:UpdateItem
              Resource: !GetAtt StudentInfoTable.Arn     
  
  DeleteStudentFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: api/services/student-info/delete-student.handler
      Description: This lambda function performs delete operations and deletes student information into DynamoDB table
      MemorySize: 128
      Timeout: 10
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:DeleteItem
              Resource: !GetAtt StudentInfoTable.Arn    
  
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${APIName}-appsync-lambda-role-${APIStage}
      ManagedPolicyArns:
        - Ref: AppSyncLambdaPolicy
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - appsync.amazonaws.com
    DependsOn:
      - AppSyncLambdaPolicy
  
  AppSyncLambdaPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Managed policy to allow AppSync to access tables in DynamoDb
      Path: /appsync/
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: 
              - lambda:InvokeFunction
            Resource: 
              - !GetAtt GetStudentFunction.Arn
              - !GetAtt CreateStudentFunction.Arn
              - !GetAtt UpdateStudentFunction.Arn
              - !GetAtt DeleteStudentFunction.Arn 
  
  AppSyncApi:
    Type: "AWS::AppSync::GraphQLApi"
    Description: The GraphQL API for a Student Information Management System (SIMS)
    Properties:
      AuthenticationType: API_KEY
      Name: !Sub ${APIName}-${APIStage}
  
  AppSyncApiKey:
    Type: "AWS::AppSync::ApiKey"
    Properties:
      Description: Api Key for AppSync SIMS API
      Expires: 172800
      ApiId: !GetAtt AppSyncApi.ApiId
  
AppSyncSchema:
  Type: "AWS::AppSync::GraphQLSchema"
  DependsOn: AppSyncApi
  Properties:
    ApiId: !GetAtt AppSyncApi.ApiId
    Definition: |
      type Delete {
        studentId: ID!
        courseId: ID!
      }

      type Get {
        studentId: ID!
        courseId: ID!
        name: String
        email: String
        year: Int
      }

      type Create {
        studentId: ID!
        courseId: ID!
        name: String
        email: String
        year: Int
      }

      type Mutation {
        createStudent(
          studentId: ID!,
          courseId: ID!,
          name: String!,
          email: String!,
          year: Int!
        ): Create
        deleteStudent(studentId: ID!, courseId: ID!): Delete
        updateStudent(
          studentId: ID!,
          courseId: ID!,
          name: String!,
          email: String!,
          year: Int!
        ): Update
      }

      type Query {
        getStudent(studentId: ID!, courseId: ID!): Get
      }

      type Update {
        studentId: ID!
        courseId: ID!
        name: String
        email: String
        year: Int
      }

      schema {
        query: Query
        mutation: Mutation
      }

  AppSyncLambdaGetStudentDataSource:
    Type: "AWS::AppSync::DataSource"
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      Name: !Sub ${APIName}_lambda_get_student_${APIStage} # A name starts with a letter and contains only numbers, letters, and "_"
      Description: Datasource for getting student data
      Type: "AWS_LAMBDA"
      ServiceRoleArn: !GetAtt LambdaRole.Arn
      LambdaConfig:
        LambdaFunctionArn: !GetAtt GetStudentFunction.Arn
  
  AppSyncLambdaCreateStudentDataSource:
    Type: "AWS::AppSync::DataSource"
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      Name: !Sub ${APIName}_lambda_create_student_${APIStage} # A name starts with a letter and contains only numbers, letters, and "_"
      Description: Datasource for saving student data
      Type: "AWS_LAMBDA"
      ServiceRoleArn: !GetAtt LambdaRole.Arn
      LambdaConfig:
        LambdaFunctionArn: !GetAtt CreateStudentFunction.Arn
  
  AppSyncLambdaUpdateStudentDataSource:
    Type: "AWS::AppSync::DataSource"
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      Name: !Sub ${APIName}_lambda_update_student_${APIStage} # A name starts with a letter and contains only numbers, letters, and "_"
      Description: Datasource for updating student data
      Type: "AWS_LAMBDA"
      ServiceRoleArn: !GetAtt LambdaRole.Arn
      LambdaConfig:
        LambdaFunctionArn: !GetAtt UpdateStudentFunction.Arn
  
  AppSyncLambdaDeleteStudentDataSource:
    Type: "AWS::AppSync::DataSource"
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      Name: !Sub ${APIName}_lambda_delete_student_${APIStage} # A name starts with a letter and contains only numbers, letters, and "_"
      Description: Datasource for deleting student data
      Type: "AWS_LAMBDA"
      ServiceRoleArn: !GetAtt LambdaRole.Arn
      LambdaConfig:
        LambdaFunctionArn: !GetAtt DeleteStudentFunction.Arn

  AppSyncGetStudentResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Query
      DataSourceName: !GetAtt AppSyncLambdaGetStudentDataSource.Name
      FieldName: getStudent
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson($context.args)
        }
      ResponseMappingTemplate: "$util.toJson($context.result)"
  
  AppSyncCreateStudentResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Mutation
      DataSourceName: !GetAtt AppSyncLambdaCreateStudentDataSource.Name
      FieldName: createStudent
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson($context.args)
        }
      ResponseMappingTemplate: "$util.toJson($context.result)"
  
  AppSyncUpdateStudentResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Mutation
      DataSourceName: !GetAtt AppSyncLambdaUpdateStudentDataSource.Name
      FieldName: updateStudent
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson($context.args)
        }
      ResponseMappingTemplate: "$util.toJson($context.result)"
  
  AppSyncDeleteStudentResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Mutation
      DataSourceName: !GetAtt AppSyncLambdaDeleteStudentDataSource.Name
      FieldName: deleteStudent
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson($context.args)
        }
      ResponseMappingTemplate: "$util.toJson($context.result)"

Outputs:
  GraphQLApiEndpoint:
    Description: Here is your GraphQL endpoint URL
    Value: !GetAtt AppSyncApi.GraphQLUrl